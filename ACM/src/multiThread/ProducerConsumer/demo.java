package multiThread.ProducerConsumer;
/*
 * 多线程经典案例：生产者消费者问题
 * 假设有一个公共的容量有限的池子，有两种人，一种是生产者，另一种是消费者。需要满足如下条件：
 * 1、生产者产生资源往池子里添加，前提是池子没有满，如果池子满了，则生产者暂停生产，直到自己的生成能放下池子。
 * 2、消费者消耗池子里的资源，前提是池子的资源不为空，否则消费者暂停消耗，进入等待直到池子里有资源数满足自己的需求。
 */
public class demo {
	public static void main(String[] args) {
		EnterPot  pot=new EnterPot();
		Producer p=new Producer(pot);
		Consumer c=new Consumer(pot);
		p.start();
		c.start();
	}
}
